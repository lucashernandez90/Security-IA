version: "3.8"

services:
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    networks:
      - kafka-net
    volumes:
      - zookeeper_data:/data

  kafka:
    image: wurstmeister/kafka:2.12-2.3.1
    container_name: kafka
    restart: always
    ports:
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-net
    volumes:
      - kafka_data:/kafka

  jobmanager:
    image: flink:1.17.1-scala_2.12
    container_name: flink-jobmanager
    restart: always
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    depends_on:
      - kafka
    networks:
      - kafka-net

  taskmanager:
    image: flink:1.17.1-scala_2.12
    container_name: flink-taskmanager
    restart: always
    command: taskmanager
    environment:
      - JOB_MANAGER_RPC_ADDRESS=jobmanager
    depends_on:
      - jobmanager
    networks:
      - kafka-net

  # Container Python 3.11 para treinamento
  python-train:
    image: python:3.11-slim
    container_name: python-train
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app  # Monta o código atual
    networks:
      - kafka-net
    environment:
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: >
      sh -c "pip install -r requirements.txt &&
             python src/train.py --in-dir data/processed --out-models models --out-reports reports --task binary"

  # Container Python 3.11 para preprocessing
  python-preprocess:
    image: python:3.11-slim
    container_name: python-preprocess
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
    networks:
      - kafka-net
    environment:
      - PYTHONPATH=/app
    command: >
      sh -c "pip install -r requirements.txt &&
             python src/preprocessing.py --raw-dir data/raw --out-dir data/processed --task binary --scaler minmax"

  #Container Python 3.11 para producer 
  python-producer:
    image: python:3.11-slim
    container_name: python-producer
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
    networks:
      - kafka-net
    environment:
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    command: >
      sh -c "pip install -r requirements.txt &&
             python src/producer.py"

  # Container Python 3.11 para desenvolvimento
  python-dev:
    image: python:3.11-slim
    container_name: python-dev
    restart: unless-stopped
    working_dir: /app
    volumes:
      - ./:/app
    networks:
      - kafka-net
    environment:
      - PYTHONPATH=/app
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
    stdin_open: true
    tty: true
    command: tail -f /dev/null  # Mantém o container rodando

networks:
  kafka-net:

volumes:
  zookeeper_data:
  kafka_data: